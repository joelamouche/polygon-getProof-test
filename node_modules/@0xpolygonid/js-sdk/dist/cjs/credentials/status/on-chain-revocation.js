"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OnChainResolver = void 0;
const onchain_revocation_1 = require("../../storage/blockchain/onchain-revocation");
/**
 * OnChainIssuer is a class that allows to interact with the onchain contract
 * and build the revocation status.
 *
 * @export
 * @beta
 * @class OnChainIssuer
 */
class OnChainResolver {
    /**
     *
     * Creates an instance of OnChainIssuer.
     * @param {Array<EthConnectionConfig>} - onchain contract address
     * @param {string} - list of EthConnectionConfig
     */
    constructor(_configs) {
        this._configs = _configs;
    }
    async resolve(credentialStatus, opts) {
        return this.getRevocationOnChain(credentialStatus, opts.issuer);
    }
    /**
     * Gets partial revocation status info from onchain issuer contract.
     *
     * @param {CredentialStatus} credentialStatus - credential status section of credential
     * @param {DID} issuerDid - issuer did
     * @returns Promise<RevocationStatus>
     */
    async getRevocationOnChain(credentialStatus, issuer) {
        const { contractAddress, chainId, revocationNonce } = this.parseOnChainId(credentialStatus.id);
        if (revocationNonce !== credentialStatus.revocationNonce) {
            throw new Error('revocationNonce does not match');
        }
        const networkConfig = this.networkByChainId(chainId);
        const onChainCaller = new onchain_revocation_1.OnChainRevocationStorage(networkConfig, contractAddress);
        const revocationStatus = await onChainCaller.getRevocationStatus(issuer.id.bigInt(), revocationNonce);
        return revocationStatus;
    }
    /**
     * Parse credentialStatus id to get contractAddress, chainId and revocationNonce
     *
     * @param {string} id - credential status id
     * @returns {{contractAddress: string, chainId: number, revocationNonce: number}}
     */
    parseOnChainId(id) {
        const url = new URL(id);
        if (!url.searchParams.has('contractAddress')) {
            throw new Error('contractAddress not found');
        }
        if (!url.searchParams.has('revocationNonce')) {
            throw new Error('revocationNonce not found');
        }
        const issuerDID = id.split('/')[0];
        if (!issuerDID) {
            throw new Error('issuer not found in credentialStatus id');
        }
        // TODO (illia-korotia): after merging core v2 need to parse contract address from did if `contractAddress` is not present in id as param
        const contractId = url.searchParams.get('contractAddress');
        const revocationNonce = parseInt(url.searchParams.get('revocationNonce'), 10);
        const parts = contractId.split(':');
        if (parts.length != 2) {
            throw new Error('invalid contract address');
        }
        const chainId = parseInt(parts[0], 10);
        const contractAddress = parts[1];
        return { contractAddress, chainId, revocationNonce, issuer: issuerDID };
    }
    networkByChainId(chainId) {
        const network = this._configs.find((c) => c.chainId === chainId);
        if (!network) {
            throw new Error(`chainId "${chainId}" not supported`);
        }
        return network;
    }
}
exports.OnChainResolver = OnChainResolver;
//# sourceMappingURL=on-chain-revocation.js.map