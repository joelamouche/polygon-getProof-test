"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FSKeyLoader = void 0;
const fs = __importStar(require("fs"));
const isBrowser = new Function('try {return this===window;}catch(e){ return false;}');
/**
 * Loader from file system
 *
 * @export
 * @beta
 * @class FSKeyLoader
 * @implements implements IKeyLoader interface
 */
class FSKeyLoader {
    constructor(dir) {
        this.dir = dir;
    }
    async load(path) {
        if (isBrowser()) {
            throw new Error('can not use fs loader in the browser');
        }
        const data = await fs.readFileSync(`${this.dir}/${path}`);
        return new Uint8Array(data);
    }
}
exports.FSKeyLoader = FSKeyLoader;
//# sourceMappingURL=key.js.map