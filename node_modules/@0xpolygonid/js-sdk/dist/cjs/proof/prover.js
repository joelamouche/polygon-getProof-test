"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NativeProver = void 0;
const snarkjs = __importStar(require("snarkjs"));
const witness_calculator_1 = require("./witness_calculator");
const ffjavascript_1 = require("ffjavascript");
const utils_1 = require("../utils");
/* eslint-disable no-console */
// NativeProver service responsible for zk generation groth16 algorithm with bn128 curve
class NativeProver {
    constructor(_circuitStorage) {
        this._circuitStorage = _circuitStorage;
    }
    async verify(zkp, circuitName) {
        try {
            const verKey = (await this._circuitStorage.loadCircuitData(circuitName))
                .verificationKey;
            await snarkjs.groth16.verify(JSON.parse(utils_1.byteDecoder.decode(verKey)), zkp.pub_signals, zkp.proof);
            // we need to terminate curve manually
            await this.terminateCurve();
            return true;
        }
        catch (e) {
            console.log(e);
            return false;
        }
    }
    // Generate calls prover-server for proof generation
    async generate(inputs, circuitId) {
        try {
            const circuitData = await this._circuitStorage.loadCircuitData(circuitId);
            const wasm = circuitData.wasm;
            const witnessCalculator = await (0, witness_calculator_1.witnessBuilder)(wasm);
            const parsedData = JSON.parse(utils_1.byteDecoder.decode(inputs));
            const wtnsBytes = await witnessCalculator.calculateWTNSBin(parsedData, 0);
            const provingKey = circuitData.provingKey;
            const { proof, publicSignals } = await snarkjs.groth16.prove(provingKey, wtnsBytes);
            // we need to terminate curve manually
            await this.terminateCurve();
            return {
                proof: proof,
                pub_signals: publicSignals
            };
        }
        catch (e) {
            console.log(e);
            throw e;
        }
    }
    async terminateCurve() {
        const curve = await (0, ffjavascript_1.getCurveFromName)(NativeProver.curveName);
        curve.terminate();
    }
}
exports.NativeProver = NativeProver;
NativeProver.curveName = 'bn128';
//# sourceMappingURL=prover.js.map