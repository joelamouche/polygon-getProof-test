import { IProofService } from '../../proof/proof-service';
import { AuthorizationRequestMessage, AuthorizationResponseMessage, IPackageManager, ZeroKnowledgeProofRequest } from '../types';
import { DID } from '@iden3/js-iden3-core';
import { ICredentialWallet } from '../../credentials';
import { W3CCredential } from '../../verifiable';
/**
 * ZKP request and credential that satisfies the zkp query conditions
 *
 * @export
 * @interface ZKPRequestWithCredential
 */
export interface ZKPRequestWithCredential {
    req: ZeroKnowledgeProofRequest;
    credential: W3CCredential;
    credentialSubjectProfileNonce: number;
}
/**
 * Interface that allows the processing of the authorization request in the raw format for given identifier
 *
 * @export
 * @beta
 * @interface IAuthHandler
 */
export interface IAuthHandler {
    /**
     * Handle authorization request protocol message
     *
     * @param {DID} id - identifier that will handle request
     * @param {Uint8Array} request - request payload
     * @returns `Promise<{
     *     token: string;
     *     authRequest: AuthorizationRequestMessage;
     *     authResponse: AuthorizationResponseMessage;
     *   }>`
     */
    handleAuthorizationRequestForGenesisDID(did: DID, request: Uint8Array): Promise<{
        token: string;
        authRequest: AuthorizationRequestMessage;
        authResponse: AuthorizationResponseMessage;
    }>;
    /**
     * unpacks authorization request
     * @export
     * @beta
     * @param {Uint8Array} request - raw byte message
     * @returns `Promise<AuthorizationRequestMessage>`
     */
    parseAuthorizationRequest(request: Uint8Array): Promise<AuthorizationRequestMessage>;
    /**
     * Generates zero-knowledge proofs for given requests and credentials
     * @export
     * @beta
     * @param {DID} userGenesisDID      - user genesis identifier for which user holds key pair.
     * @param {number} authProfileNonce - profile nonce that will be used for authorization.
     * @param {AuthorizationRequestMessage} authRequest - authorization request, protocol message.
     * @param {ZKPRequestWithCredential[]} zkpRequestsWithCreds - zero knowledge proof request with chosen credential to use.
     * @returns `Promise<{
     *     token: string;
     *     authRequest: AuthorizationRequestMessage;
     *     authResponse: AuthorizationResponseMessage;
     *   }>}`
     */
    generateAuthorizationResponse(userGenesisDID: DID, authProfileNonce: number, authRequest: AuthorizationRequestMessage, zkpRequestsWithCreds: ZKPRequestWithCredential[]): Promise<{
        token: string;
        authRequest: AuthorizationRequestMessage;
        authResponse: AuthorizationResponseMessage;
    }>;
}
/**
 *
 * Allows to process AuthorizationRequest protocol message and produce JWZ response.
 *
 * @export
 * @beta

 * @class AuthHandler
 * @implements implements IAuthHandler interface
 */
export declare class AuthHandler implements IAuthHandler {
    private readonly _packerMgr;
    private readonly _proofService;
    private readonly _credentialWallet;
    /**
     * Creates an instance of AuthHandler.
     * @param {IPackageManager} _packerMgr - package manager to unpack message envelope
     * @param {IProofService} _proofService -  proof service to verify zk proofs
     * @param {ICredentialWallet} _credentialWallet -  wallet to search credentials
     *
     */
    constructor(_packerMgr: IPackageManager, _proofService: IProofService, _credentialWallet: ICredentialWallet);
    /**
     * Handles only messages with authorization/v1.0/request type
     * Generates all requested proofs and wraps authorization response message to JWZ token
     * works when profiles are not supported
     * @param {DID} did - an identity that will process the request
     * @param {Uint8Array} request - raw request
     * @returns `Promise<{token: string; authRequest: AuthorizationRequestMessage; authResponse: AuthorizationResponseMessage;}>` JWZ token, parsed request and response
     */
    handleAuthorizationRequestForGenesisDID(did: DID, request: Uint8Array): Promise<{
        token: string;
        authRequest: AuthorizationRequestMessage;
        authResponse: AuthorizationResponseMessage;
    }>;
    /**
     * unpacks authorization request
     * @export
     * @beta
     * @param {Uint8Array} request - raw byte message
     * @returns `Promise<AuthorizationRequestMessage>`
     */
    parseAuthorizationRequest(request: Uint8Array): Promise<AuthorizationRequestMessage>;
    /**
     * Generates zero-knowledge proofs for given requests and credentials
     * @export
     * @beta
     * @param {DID} userGenesisDID      - user genesis identifier for which user holds key pair.
     * @param {number} authProfileNonce - profile nonce that will be used for authorization.
     * @param {AuthorizationRequestMessage} authRequest - authorization request, protocol message.
     * @param {ZKPRequestWithCredential[]} zkpRequestsWithCreds - zero knowledge proof request with chosen credential to use.
     * @returns `Promise<{
     *     token: string;
     *     authRequest: AuthorizationRequestMessage;
     *     authResponse: AuthorizationResponseMessage;
     *   }>}`
     */
    generateAuthorizationResponse(userGenesisDID: DID, authProfileNonce: number, authRequest: AuthorizationRequestMessage, zkpRequestsWithCreds?: ZKPRequestWithCredential[]): Promise<{
        token: string;
        authRequest: AuthorizationRequestMessage;
        authResponse: AuthorizationResponseMessage;
    }>;
}
