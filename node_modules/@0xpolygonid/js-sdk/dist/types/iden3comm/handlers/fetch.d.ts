import { IPackageManager } from '../types';
import { DID } from '@iden3/js-iden3-core';
import { W3CCredential } from '../../verifiable';
/**
 * Interface that allows the processing of the credential offer in the raw format for given identifier
 *
 * @export
 * @beta
 * @interface IFetchHandler
 */
export interface IFetchHandler {
    /**
     * Handle credential offer request protocol message
     *
     * @param {DID} id - identifier that will handle offer
     * @param {CredentialsOfferMessage} offer - raw offer message
     * @param {number} profileNonce -  nonce of the did to which credential has been offered
     * @returns `Promise<W3CCredential>`
     */
    handleCredentialOffer(did: DID, offer: Uint8Array, profileNonce?: number): Promise<W3CCredential[]>;
}
/**
 *
 * Allows to handle Credential offer protocol message and return fetched credential
 *
 * @export
 * @beta

 * @class FetchHandler
 * @implements implements IFetchHandler interface
 */
export declare class FetchHandler implements IFetchHandler {
    private readonly _packerMgr;
    /**
     * Creates an instance of AuthHandler.
     * @param {IPackageManager} _packerMgr - package manager to unpack message envelope
     */
    constructor(_packerMgr: IPackageManager);
    /**
     * Handles only messages with credentials/1.0/offer type
     * @param {DID} did - an identity that will process the request
     * @param {Uint8Array} offer - raw offer message
     * @param {number} profileNonce - nonce of the did to which credential has been offered
     * @returns `Promise<W3CCredential[]` */
    handleCredentialOffer(did: DID, offer: Uint8Array, profileNonce?: number): Promise<W3CCredential[]>;
}
