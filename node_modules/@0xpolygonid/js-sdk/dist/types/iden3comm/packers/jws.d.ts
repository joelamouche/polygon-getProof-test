import { BasicMessage, IPacker, PackerParams } from '../types';
import { MediaType } from '../constants';
import { KMS } from '../../kms/';
import { Signer } from 'did-jwt';
import { DIDDocument, Resolvable, VerificationMethod } from 'did-resolver';
export type SignerFn = (vm: VerificationMethod, data: Uint8Array) => Signer;
/**
 * Packer that can pack message to JWZ token,
 * and unpack and validate JWZ envelope
 * @exports
 * @beta
 * @class ZKPPacker
 * @implements implements IPacker interface
 */
export declare class JWSPacker implements IPacker {
    private readonly _kms;
    private readonly _documentResolver;
    /**
     * Creates an instance of JWSPacker.
     *
     * @param {KMS} _kms
     * @param {Resolvable} [_documentResolver={ resolve: resolveDIDDocument }]
     * @memberof JWSPacker
     */
    constructor(_kms: KMS, _documentResolver?: Resolvable);
    /**
     * creates JSON Web Signature token
     *
     * @param {Uint8Array} payload - serialized message
     * @param {PackerParams} params - sender id and proving alg are required
     * @returns `Promise<Uint8Array>`
     */
    pack(payload: Uint8Array, params: PackerParams & {
        alg: string;
        kid?: string;
        didDocument?: DIDDocument;
        signer?: SignerFn;
    }): Promise<Uint8Array>;
    /**
     * validate envelope which is jwz token
     *
     * @param {Uint8Array} envelope
     * @returns `Promise<BasicMessage>`
     */
    unpack(envelope: Uint8Array): Promise<BasicMessage>;
    mediaType(): MediaType;
    private resolveDidDoc;
}
