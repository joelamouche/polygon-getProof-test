import { RevocationStatus, CredentialStatus } from '../../verifiable';
import { EthConnectionConfig } from '../../storage/blockchain';
import { CredentialStatusResolver } from './resolver';
import { DID } from '@iden3/js-iden3-core';
/**
 * OnChainIssuer is a class that allows to interact with the onchain contract
 * and build the revocation status.
 *
 * @export
 * @beta
 * @class OnChainIssuer
 */
export declare class OnChainResolver implements CredentialStatusResolver {
    private readonly _configs;
    /**
     *
     * Creates an instance of OnChainIssuer.
     * @param {Array<EthConnectionConfig>} - onchain contract address
     * @param {string} - list of EthConnectionConfig
     */
    constructor(_configs: EthConnectionConfig[]);
    resolve(credentialStatus: CredentialStatus, opts: {
        issuer: DID;
    }): Promise<RevocationStatus>;
    /**
     * Gets partial revocation status info from onchain issuer contract.
     *
     * @param {CredentialStatus} credentialStatus - credential status section of credential
     * @param {DID} issuerDid - issuer did
     * @returns Promise<RevocationStatus>
     */
    getRevocationOnChain(credentialStatus: CredentialStatus, issuer: DID): Promise<RevocationStatus>;
    /**
     * Parse credentialStatus id to get contractAddress, chainId and revocationNonce
     *
     * @param {string} id - credential status id
     * @returns {{contractAddress: string, chainId: number, revocationNonce: number}}
     */
    parseOnChainId(id: string): {
        contractAddress: string;
        chainId: number;
        revocationNonce: number;
        issuer: string;
    };
    networkByChainId(chainId: number): EthConnectionConfig;
}
