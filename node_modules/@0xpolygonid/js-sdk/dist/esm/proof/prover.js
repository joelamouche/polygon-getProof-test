import * as snarkjs from 'snarkjs';
import { witnessBuilder } from './witness_calculator';
import { getCurveFromName } from 'ffjavascript';
import { byteDecoder } from '../utils';
/* eslint-disable no-console */
// NativeProver service responsible for zk generation groth16 algorithm with bn128 curve
export class NativeProver {
    constructor(_circuitStorage) {
        this._circuitStorage = _circuitStorage;
    }
    async verify(zkp, circuitName) {
        try {
            const verKey = (await this._circuitStorage.loadCircuitData(circuitName))
                .verificationKey;
            await snarkjs.groth16.verify(JSON.parse(byteDecoder.decode(verKey)), zkp.pub_signals, zkp.proof);
            // we need to terminate curve manually
            await this.terminateCurve();
            return true;
        }
        catch (e) {
            console.log(e);
            return false;
        }
    }
    // Generate calls prover-server for proof generation
    async generate(inputs, circuitId) {
        try {
            const circuitData = await this._circuitStorage.loadCircuitData(circuitId);
            const wasm = circuitData.wasm;
            const witnessCalculator = await witnessBuilder(wasm);
            const parsedData = JSON.parse(byteDecoder.decode(inputs));
            const wtnsBytes = await witnessCalculator.calculateWTNSBin(parsedData, 0);
            const provingKey = circuitData.provingKey;
            const { proof, publicSignals } = await snarkjs.groth16.prove(provingKey, wtnsBytes);
            // we need to terminate curve manually
            await this.terminateCurve();
            return {
                proof: proof,
                pub_signals: publicSignals
            };
        }
        catch (e) {
            console.log(e);
            throw e;
        }
    }
    async terminateCurve() {
        const curve = await getCurveFromName(NativeProver.curveName);
        curve.terminate();
    }
}
NativeProver.curveName = 'bn128';
//# sourceMappingURL=prover.js.map