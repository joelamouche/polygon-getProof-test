import { MediaType } from '../constants';
import { PROTOCOL_MESSAGE_TYPE } from '../constants';
import { proving } from '@iden3/js-jwz';
import * as uuid from 'uuid';
import { byteDecoder, byteEncoder } from '../../utils';
/**
 *
 * Allows to handle Credential offer protocol message and return fetched credential
 *
 * @export
 * @beta

 * @class FetchHandler
 * @implements implements IFetchHandler interface
 */
export class FetchHandler {
    /**
     * Creates an instance of AuthHandler.
     * @param {IPackageManager} _packerMgr - package manager to unpack message envelope
     */
    constructor(_packerMgr) {
        this._packerMgr = _packerMgr;
    }
    /**
     * Handles only messages with credentials/1.0/offer type
     * @param {DID} did - an identity that will process the request
     * @param {Uint8Array} offer - raw offer message
     * @param {number} profileNonce - nonce of the did to which credential has been offered
     * @returns `Promise<W3CCredential[]` */
    async handleCredentialOffer(did, offer, profileNonce = 0) {
        // each credential info in the offer we need to fetch
        const { unpackedMessage: message } = await this._packerMgr.unpack(offer);
        const offerMessage = message;
        if (message.type !== PROTOCOL_MESSAGE_TYPE.CREDENTIAL_OFFER_MESSAGE_TYPE) {
            throw new Error('Invalid media type');
        }
        const credentials = [];
        for (let index = 0; index < offerMessage.body.credentials.length; index++) {
            const credentialInfo = offerMessage.body.credentials[index];
            const guid = uuid.v4();
            const fetchRequest = {
                id: guid,
                typ: MediaType.ZKPMessage,
                type: PROTOCOL_MESSAGE_TYPE.CREDENTIAL_FETCH_REQUEST_MESSAGE_TYPE,
                thid: offerMessage.thid ?? guid,
                body: {
                    id: credentialInfo.id
                },
                from: did.toString(),
                to: offerMessage.from
            };
            const msgBytes = byteEncoder.encode(JSON.stringify(fetchRequest));
            const token = byteDecoder.decode(await this._packerMgr.pack(MediaType.ZKPMessage, msgBytes, {
                senderDID: did,
                profileNonce,
                provingMethodAlg: proving.provingMethodGroth16AuthV2Instance.methodAlg
            }));
            const resp = await fetch(offerMessage.body.url, {
                method: 'post',
                body: token
            });
            if (resp.status !== 200) {
                throw new Error(`could not fetch W3C credential, ${credentialInfo.id}`);
            }
            const data = await resp.json();
            credentials.push(data.body.credential);
        }
        return credentials;
    }
}
//# sourceMappingURL=fetch.js.map