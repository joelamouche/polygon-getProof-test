import { MediaType } from '../constants';
import { PROTOCOL_MESSAGE_TYPE } from '../constants';
import { proving } from '@iden3/js-jwz';
import * as uuid from 'uuid';
import { byteDecoder, byteEncoder } from '../../utils';
/**
 *
 * Allows to process AuthorizationRequest protocol message and produce JWZ response.
 *
 * @export
 * @beta

 * @class AuthHandler
 * @implements implements IAuthHandler interface
 */
export class AuthHandler {
    /**
     * Creates an instance of AuthHandler.
     * @param {IPackageManager} _packerMgr - package manager to unpack message envelope
     * @param {IProofService} _proofService -  proof service to verify zk proofs
     * @param {ICredentialWallet} _credentialWallet -  wallet to search credentials
     *
     */
    constructor(_packerMgr, _proofService, _credentialWallet) {
        this._packerMgr = _packerMgr;
        this._proofService = _proofService;
        this._credentialWallet = _credentialWallet;
    }
    /**
     * Handles only messages with authorization/v1.0/request type
     * Generates all requested proofs and wraps authorization response message to JWZ token
     * works when profiles are not supported
     * @param {DID} did - an identity that will process the request
     * @param {Uint8Array} request - raw request
     * @returns `Promise<{token: string; authRequest: AuthorizationRequestMessage; authResponse: AuthorizationResponseMessage;}>` JWZ token, parsed request and response
     */
    async handleAuthorizationRequestForGenesisDID(did, request) {
        const { unpackedMessage: message } = await this._packerMgr.unpack(request);
        const authRequest = message;
        if (message.type !== PROTOCOL_MESSAGE_TYPE.AUTHORIZATION_REQUEST_MESSAGE_TYPE) {
            throw new Error('Invalid media type');
        }
        const authRequestBody = message.body;
        const guid = uuid.v4();
        const authResponse = {
            id: guid,
            typ: MediaType.ZKPMessage,
            type: PROTOCOL_MESSAGE_TYPE.AUTHORIZATION_RESPONSE_MESSAGE_TYPE,
            thid: message.thid ?? guid,
            body: {
                did_doc: undefined,
                message: authRequestBody.message,
                scope: []
            },
            from: did.toString(),
            to: message.from
        };
        for (const proofReq of authRequestBody.scope) {
            const zkpReq = {
                id: proofReq.id,
                circuitId: proofReq.circuitId,
                query: proofReq.query
            };
            const creds = await this._credentialWallet.findByQuery(proofReq.query);
            const credsForGenesisDID = await this._credentialWallet.filterByCredentialSubject(creds, did);
            if (credsForGenesisDID.length == 0) {
                throw new Error(`no credential were issued on the given id ${did.toString()}`);
            }
            const zkpRes = await this._proofService.generateProof(zkpReq, did, credsForGenesisDID[0]);
            authResponse.body.scope.push(zkpRes);
        }
        const msgBytes = byteEncoder.encode(JSON.stringify(authResponse));
        const token = byteDecoder.decode(await this._packerMgr.pack(MediaType.ZKPMessage, msgBytes, {
            senderDID: did,
            profileNonce: 0,
            provingMethodAlg: proving.provingMethodGroth16AuthV2Instance.methodAlg
        }));
        return { authRequest, authResponse, token };
    }
    /**
     * unpacks authorization request
     * @export
     * @beta
     * @param {Uint8Array} request - raw byte message
     * @returns `Promise<AuthorizationRequestMessage>`
     */
    async parseAuthorizationRequest(request) {
        const { unpackedMessage: message } = await this._packerMgr.unpack(request);
        const authRequest = message;
        if (message.type !== PROTOCOL_MESSAGE_TYPE.AUTHORIZATION_REQUEST_MESSAGE_TYPE) {
            throw new Error('Invalid media type');
        }
        return authRequest;
    }
    /**
     * Generates zero-knowledge proofs for given requests and credentials
     * @export
     * @beta
     * @param {DID} userGenesisDID      - user genesis identifier for which user holds key pair.
     * @param {number} authProfileNonce - profile nonce that will be used for authorization.
     * @param {AuthorizationRequestMessage} authRequest - authorization request, protocol message.
     * @param {ZKPRequestWithCredential[]} zkpRequestsWithCreds - zero knowledge proof request with chosen credential to use.
     * @returns `Promise<{
     *     token: string;
     *     authRequest: AuthorizationRequestMessage;
     *     authResponse: AuthorizationResponseMessage;
     *   }>}`
     */
    async generateAuthorizationResponse(userGenesisDID, authProfileNonce, authRequest, zkpRequestsWithCreds) {
        const guid = uuid.v4();
        const authResponse = {
            id: guid,
            typ: MediaType.ZKPMessage,
            type: PROTOCOL_MESSAGE_TYPE.AUTHORIZATION_RESPONSE_MESSAGE_TYPE,
            thid: authRequest.thid ?? guid,
            body: {
                message: authRequest.body.message,
                scope: []
            },
            from: userGenesisDID.toString(),
            to: authRequest.from
        };
        for (const r of zkpRequestsWithCreds) {
            const zkpRes = await this._proofService.generateProof(r.req, userGenesisDID, r.credential, {
                authProfileNonce: authProfileNonce,
                credentialSubjectProfileNonce: r.credentialSubjectProfileNonce,
                skipRevocation: false
            });
            authResponse.body.scope.push(zkpRes);
        }
        const msgBytes = byteEncoder.encode(JSON.stringify(authResponse));
        const token = byteDecoder.decode(await this._packerMgr.pack(MediaType.ZKPMessage, msgBytes, {
            senderDID: userGenesisDID,
            profileNonce: authProfileNonce,
            provingMethodAlg: proving.provingMethodGroth16AuthV2Instance.methodAlg
        }));
        return { authRequest, authResponse, token };
    }
}
//# sourceMappingURL=auth.js.map